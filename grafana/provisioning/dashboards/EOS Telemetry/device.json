{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "datasource",
          "uid": "grafana"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 2,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "influxdb",
        "uid": "PF6CD3C7EE64CF7D1"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "CPU Utilization",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 20,
            "gradientMode": "hue",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineStyle": {
              "fill": "solid"
            },
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": 3600000,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "displayName": "${__field.name}",
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "id": 6,
      "options": {
        "legend": {
          "calcs": [
            "max"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.2.4",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "PF6CD3C7EE64CF7D1"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "cpu",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "import \"strings\"\nfrom(bucket: \"eos-telemetry\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == \"cpu\" and r._field =~ /cpu\\/\\d\\/util$/  and r.source == \"${device}\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: true)\n  |> fill(column: \"_value\", usePrevious: true)\n  |> map(fn: (r) => ({ r with _field: \"Core \" + strings.split(v: r._field, t: \"/\")[5] }))\n  |> yield()\n",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "mean"
              }
            ]
          ],
          "tags": []
        }
      ],
      "title": "CPU Utilization",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "PF6CD3C7EE64CF7D1"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 2,
          "mappings": [],
          "min": 0,
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "semi-dark-orange",
                "value": 70
              },
              {
                "color": "dark-red",
                "value": 80
              }
            ]
          },
          "unit": "bytes"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 5,
        "x": 12,
        "y": 0
      },
      "id": 15,
      "options": {
        "minVizHeight": 200,
        "minVizWidth": 200,
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "last"
          ],
          "fields": "/^Used Memory$/",
          "values": false
        },
        "showThresholdLabels": true,
        "showThresholdMarkers": true,
        "sizing": "auto",
        "text": {}
      },
      "pluginVersion": "10.2.3",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "PF6CD3C7EE64CF7D1"
          },
          "hide": false,
          "query": "import \"influxdata/influxdb/schema\"\nimport \"experimental\"\n\ntotalRam = from(bucket: \"eos-telemetry\")\n  |> range(start: 0)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"memory\" and r[\"_field\"] == \"Kernel/proc/meminfo/memTotal\" and r[\"source\"] == \"${device}\")\n  |> last()\n  |> findRecord(fn: (key) => key._field == \"Kernel/proc/meminfo/memTotal\", idx: 0)\n\nramUsage = from(bucket: \"eos-telemetry\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"memory\" and r[\"_field\"] == \"Kernel/proc/meminfo/memAvailable\" and r[\"source\"] == \"${device}\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: true)\n  |> fill(column: \"_value\", usePrevious: true)\n  |> schema.fieldsAsCols()\n  |> map(fn: (r) => ({ r with \"Total Memory\": totalRam._value }) )\n  |> map(fn: (r) => ({ r with \"Used Memory\": totalRam._value - r[\"Kernel/proc/meminfo/memAvailable\"] }) )\n  |> drop(columns: [\"Kernel/proc/meminfo/memAvailable\"])\n  |> experimental.unpivot()\n  |> drop(columns: [\"host\", \"path\", \"source\"])\n  |> yield()",
          "refId": "A"
        }
      ],
      "title": "Memory Utilization",
      "transformations": [],
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "P951FEA4DE68E13C5"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 10,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "never",
            "spanNulls": 3600000,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "links": [],
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "Bps"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 8
      },
      "id": 16,
      "interval": "10s",
      "options": {
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "none"
        }
      },
      "pluginVersion": "9.2.4",
      "targets": [
        {
          "alias": "Ingress datarate",
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "measurement": "ifcounters",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"eos-telemetry\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ifcounters\" and (r[\"_field\"] == \"interfaces/interface/state/counters/in_octets\" or r[\"_field\"] == \"interfaces/interface/state/counters/out_octets\") and r[\"name\"] == \"${interface}\" and r[\"source\"] == \"${device}\")\n  |> aggregateWindow(every: 10s, fn: last, createEmpty: true)\n  |> derivative(unit: 1s, nonNegative: true)\n  |> map(fn: (r) => if r._field == \"interfaces/interface/state/counters/in_octets\" then {r with _field: \"Ingress datarate\"}\n               else if r._field == \"interfaces/interface/state/counters/out_octets\" then {r with _field: \"Egress datarate\"}\n               else {r with _field: r._field})\n  |> yield()",
          "refId": "A",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "interfaces/interface/state/counters/in_octets"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "1s"
                ],
                "type": "derivative"
              }
            ]
          ],
          "tags": [
            {
              "key": "source::tag",
              "operator": "=~",
              "value": "/^$device$/"
            },
            {
              "condition": "AND",
              "key": "name::tag",
              "operator": "=~",
              "value": "/^$interface$/"
            }
          ]
        },
        {
          "alias": "Egress datarate",
          "datasource": {
            "type": "influxdb",
            "uid": "P951FEA4DE68E13C5"
          },
          "groupBy": [
            {
              "params": [
                "$__interval"
              ],
              "type": "time"
            },
            {
              "params": [
                "null"
              ],
              "type": "fill"
            }
          ],
          "hide": false,
          "measurement": "ifcounters",
          "orderByTime": "ASC",
          "policy": "default",
          "query": "from(bucket: \"eos-telemetry\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"ifcounters\" and (r[\"_field\"] == \"interfaces/interface/state/counters/in_octets\" or r[\"_field\"] == \"interfaces/interface/state/counters/out_octets\") and r[\"name\"] == \"${interface}\" and r[\"source\"] == \"${device}\")\n  |> aggregateWindow(every: 10s, fn: last, createEmpty: true)\n  |> derivative(unit: 1s, nonNegative: true)\n  |> map(fn: (r) => if r._field == \"interfaces/interface/state/counters/in_octets\" then {r with _field: \"Ingress datarate\"}\n               else if r._field == \"interfaces/interface/state/counters/out_octets\" then {r with _field: \"Egress datarate\"}\n               else {r with _field: r._field})\n  |> yield()",
          "refId": "B",
          "resultFormat": "time_series",
          "select": [
            [
              {
                "params": [
                  "interfaces/interface/state/counters/out_octets"
                ],
                "type": "field"
              },
              {
                "params": [],
                "type": "last"
              },
              {
                "params": [
                  "1s"
                ],
                "type": "derivative"
              }
            ]
          ],
          "tags": [
            {
              "key": "source::tag",
              "operator": "=~",
              "value": "/^$device$/"
            },
            {
              "condition": "AND",
              "key": "name::tag",
              "operator": "=~",
              "value": "/^$interface$/"
            }
          ]
        }
      ],
      "title": "Bitrate In/Out of ${interface}",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "PF6CD3C7EE64CF7D1"
      },
      "description": "",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            }
          },
          "decimals": 4,
          "mappings": [],
          "unit": "bytes"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 6,
        "x": 12,
        "y": 8
      },
      "id": 14,
      "options": {
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "pieType": "pie",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "9.2.4",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "PF6CD3C7EE64CF7D1"
          },
          "query": "import \"influxdata/influxdb/schema\"\nimport \"experimental\"\n\ntotalRam = from(bucket: \"eos-telemetry\")\n  |> range(start: 0)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"memory\" and r[\"_field\"] == \"Kernel/proc/meminfo/memTotal\" and r[\"source\"] == \"${device}\")\n  |> last()\n  |> findRecord(fn: (key) => key._field == \"Kernel/proc/meminfo/memTotal\", idx: 0)\n\nramUsage = from(bucket: \"eos-telemetry\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"memory\" and (r[\"_field\"] == \"Kernel/proc/meminfo/memFree\" or r[\"_field\"] == \"Kernel/proc/meminfo/memAvailable\") and r[\"source\"] == \"${device}\")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: true)\n  |> fill(column: \"_value\", usePrevious: true)\n  |> schema.fieldsAsCols()\n  |> map(fn: (r) => ({ r with \"Used Memory\": totalRam._value - r[\"Kernel/proc/meminfo/memAvailable\"] }) )\n  |> map(fn: (r) => ({ r with \"Reclaimable Memory\": r[\"Kernel/proc/meminfo/memAvailable\"] - r[\"Kernel/proc/meminfo/memFree\"] }) )\n  |> drop(columns: [\"Kernel/proc/meminfo/memAvailable\"])\n  |> experimental.unpivot()\n  |> map(fn: (r) => if r._field == \"Kernel/proc/meminfo/memFree\" then {r with _field: \"Free Memory\"}\n               else {r with _field: r._field})\n  |> drop(columns: [\"path\", \"source\"])\n  |> yield()",
          "refId": "A"
        }
      ],
      "title": "Memory Allocation",
      "transformations": [],
      "type": "piechart"
    }
  ],
  "refresh": "10s",
  "schemaVersion": 39,
  "tags": [
    "Arista"
  ],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "ld365",
          "value": "ld365"
        },
        "datasource": {
          "type": "influxdb",
          "uid": "P951FEA4DE68E13C5"
        },
        "definition": "SHOW TAG VALUES WITH KEY=\"source\"",
        "hide": 0,
        "includeAll": false,
        "multi": false,
        "name": "device",
        "options": [],
        "query": "SHOW TAG VALUES WITH KEY=\"source\"",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      },
      {
        "current": {
          "selected": false,
          "text": "Ethernet10/1",
          "value": "Ethernet10/1"
        },
        "datasource": {
          "type": "influxdb",
          "uid": "P951FEA4DE68E13C5"
        },
        "definition": "SHOW TAG VALUES FROM \"ifcounters\" WITH KEY=\"name\" WHERE \"source\"='${device}'",
        "hide": 0,
        "includeAll": false,
        "multi": false,
        "name": "interface",
        "options": [],
        "query": "SHOW TAG VALUES FROM \"ifcounters\" WITH KEY=\"name\" WHERE \"source\"='${device}'",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-5m",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ]
  },
  "timezone": "",
  "title": "Device Health",
  "uid": "ky1bhqdMz",
  "version": 10,
  "weekStart": ""
}